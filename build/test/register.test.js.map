{"version":3,"sources":["../../src/test/register.test.js"],"names":["chai","use","chaiHttp","should","describe","it","done","request","app","post","send","firstName","lastName","email","password","gender","jobRole","department","address","end","err","res","have","status","body","be","a"],"mappings":"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","sourcesContent":["import chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\n\r\nimport app from '../server';\r\n\r\nchai.use(chaiHttp);\r\nchai.should();\r\n\r\n// let signUpToken = null;\r\n// let token = '';\r\n\r\ndescribe('POST register', () => {\r\n    // error if fields are empty\r\n    describe('POST sign up', () => {\r\n        it('should give error if fields are empty', (done) => {\r\n            chai.request(app)\r\n                .post('/api/v1/auth/create-user')\r\n                .send({\r\n                    firstName: '',\r\n                    lastName: '',\r\n                    email: 'new usermkmkm',\r\n                    password: 'admin',\r\n                    gender: 'male',\r\n                    jobRole: 'assistant',\r\n                    department: '',\r\n                    address: '4, alomosho'\r\n                })\r\n                .end((err, res) => {\r\n                    res.should.have.status(400);\r\n                    res.body.should.be.a('object');\r\n                })\r\n            done();\r\n        })\r\n\r\n\r\n        // error if a user already exists\r\n        it('should give error is a user already exists', (done) => {\r\n            chai.request(app)\r\n                .post('/api/v1/auth/create-user')\r\n                .send({\r\n                    firstName: 'mama',\r\n                    lastName: 'omo',\r\n                    email: 'mohammed',\r\n                    password: 'ibrahim',\r\n                    gender: 'male',\r\n                    jobRole: 'assistant',\r\n                    department: 'engineer',\r\n                    address: '4, alomosho'\r\n                })\r\n                .end((err, res) => {\r\n                    res.should.have.status(400);\r\n                    res.body.should.be.a('object');\r\n                })\r\n            done();\r\n        })\r\n\r\n\r\n        // register new user\r\n        it('should sign up a user', (done) => {\r\n            chai.request(app)\r\n                .post('/api/v1/auth/create-user')\r\n                .send({\r\n                    firstName: 'mohammed',\r\n                    lastName: 'ibrahim',\r\n                    email: 'ibrahim@gmail.com',\r\n                    password: 'administrator',\r\n                    gender: 'male',\r\n                    jobRole: 'assistant',\r\n                    department: 'engineer',\r\n                    address: '4, alomosho'\r\n                })\r\n                .end((err, res) => {\r\n                    res.should.have.status(201);\r\n                    res.body.should.be.a('object');\r\n                })\r\n            done();\r\n        })\r\n    })\r\n\r\n\r\n    // test log in\r\n    // error if fields are empty\r\n    describe('POST login', () => {\r\n        it('should give error if fields are empty', (done) => {\r\n            chai.request(app)\r\n                .post('/api/v1/auth/signin')\r\n                .send({\r\n                    email: 'new usermkmkm',\r\n                    password: ''\r\n                })\r\n                .end((err, res) => {\r\n                    res.should.have.status(400);\r\n                    res.body.should.be.a('object');\r\n                })\r\n            done();\r\n        })\r\n\r\n\r\n        // error if user does not exist\r\n        it('should give error if user does not exist', (done) => {\r\n            chai.request(app)\r\n                .post('/api/v1/auth/signin')\r\n                .send({\r\n                    email: 'non existing user',\r\n                    password: 'password'\r\n                })\r\n                .end((err, res) => {\r\n                    res.should.have.status(400)\r\n                    res.body.should.be.a('object');\r\n                })\r\n            done();\r\n        })\r\n\r\n\r\n        // login a user\r\n        it('should log in an existing user', (done) => {\r\n            chai.request(app)\r\n                .post('/api/v1/auth/signin')\r\n                .send({\r\n                    email: 'mohammed',\r\n                    password: 'ibrahim'\r\n                })\r\n                .end((err, res) => {\r\n                    res.should.have.status(201);\r\n                    res.body.should.be.a('object');\r\n                    // token = res.body.data.token\r\n                })\r\n            done();\r\n        })\r\n\r\n\r\n        // error for incorrect email or password\r\n        it('should give error for incorrect email or password', (done) => {\r\n            chai.request(app)\r\n                .post('/api/v1/auth/signin')\r\n                .send({\r\n                    email: 'new',\r\n                    password: 'bypass'\r\n                })\r\n                .end((err, res) => {\r\n                    res.should.have.status(403);\r\n                    res.body.should.be.a('object');\r\n                })\r\n            done();\r\n        })\r\n    })\r\n})\r\n\r\n// export default token;"],"file":"register.test.js"}