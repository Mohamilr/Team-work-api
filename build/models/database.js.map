{"version":3,"sources":["../../src/models/database.js"],"names":["dotenv","config","connection","database","process","env","DB_DATABASE","user","DB_USER","password","DB_PASSWORD","host","DB_HOST","port","DB_PORT","pool","pg","Pool","on","userTable","userTableQuery","query","console","log","articleTable","articleTableQuery","articleCommentTable","articleCommentTableQuery","gifTable","gifTableQuery","gifCommentTable","gifCommentTableQuery"],"mappings":"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","sourcesContent":["import pg from 'pg';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\nconst connection = {\r\n    database: process.env.DB_DATABASE,\r\n    user: process.env.DB_USER,\r\n    password: process.env.DB_PASSWORD,\r\n    host: process.env.DB_HOST,\r\n    port: process.env.DB_PORT\r\n};\r\n\r\nconst pool = new pg.Pool(connection);\r\n\r\npool.on('connect', () => {})\r\n\r\n// user table\r\nconst userTable = async () => {\r\n    const userTableQuery = `CREATE TABLE IF NOT EXISTS\r\n    employee(\r\n        authorId SERIAL PRIMARY KEY NOT NULL UNIQUE,\r\n        firstName VARCHAR(50) NOT NULL,\r\n        lastName VARCHAR(50) NOT NULL,\r\n        email VARCHAR(50) NOT NULL,\r\n        password VARCHAR(200) NOT NULL,\r\n        gender VARCHAR(20) NOT NULL,\r\n        jobRole VARCHAR(50) NOT NULL,\r\n        department VARCHAR(100) NOT NULL,\r\n        address VARCHAR(100) NOT NULL\r\n    )`;\r\n\r\n    try {\r\n        await pool.query(userTableQuery);\r\n        console.log('employee table created')\r\n    }\r\n    catch (e) {\r\n        console.log(e)\r\n    }\r\n};\r\n\r\n// article table\r\nconst articleTable = async () => {\r\n    const articleTableQuery = `CREATE TABLE IF NOT EXISTS\r\n    articles(\r\n        articleId SERIAL PRIMARY KEY NOT NULL UNIQUE,\r\n        title VARCHAR(100) NOT NULL,\r\n        article VARCHAR(5000) NOT NULL,\r\n        authorId INT NOT NULL,\r\n        createdOn VARCHAR(50) NOT NULL,\r\n        FOREIGN KEY(authorId) REFERENCES employee(authorId)  ON DELETE CASCADE ON UPDATE CASCADE\r\n    )`;\r\n\r\n    try{\r\n        await pool.query(articleTableQuery);\r\n        console.log('article table created');\r\n    }\r\n    catch(e) {\r\n        console.log(e)\r\n    }\r\n};\r\n\r\n// // //  article comment table\r\nconst articleCommentTable = async () => {\r\n    const articleCommentTableQuery = `CREATE TABLE IF NOT EXISTS\r\n    article_comments(\r\n        commentId SERIAL PRIMARY KEY NOT NULL UNIQUE,\r\n        comment VARCHAR(300) NOT NULL,\r\n        createdOn VARCHAR(50) NOT NULL,\r\n        authorId INT NOT NULL,\r\n        articleId INT NOT NULL,\r\n        FOREIGN KEY(articleId) REFERENCES articles(articleId) ON UPDATE CASCADE ON DELETE CASCADE,\r\n        FOREIGN KEY(authorId) REFERENCES employee(authorId) ON UPDATE CASCADE ON DELETE CASCADE\r\n    )`;\r\n\r\n    try{\r\n        await pool.query(articleCommentTableQuery);\r\n        console.log('article comment table created')\r\n    }\r\n    catch(e) {\r\n        console.log(e)\r\n    }\r\n};\r\n\r\n// gif table\r\nconst gifTable = async () => {\r\n    const gifTableQuery = `CREATE TABLE IF NOT EXISTS\r\n    gifs(\r\n        gifId SERIAL PRIMARY KEY NOT NULL UNIQUE,\r\n        image VARCHAR(500) NOT NULL,\r\n        gifTitle VARCHAR(50) NOT NULL,\r\n        gifAuthorId INT NOT NULL,\r\n        gifCreatedOn VARCHAR(50) NOT NULL,\r\n        FOREIGN KEY(gifAuthorId) REFERENCES employee(authorId) ON DELETE CASCADE ON UPDATE CASCADE\r\n    )`;\r\n\r\n    try{\r\n        await pool.query(gifTableQuery)\r\n        console.log('gif table created');\r\n    }\r\n    catch(e) {\r\n        console.log(e)\r\n    }\r\n};\r\n\r\n// // // gif comment table\r\nconst gifCommentTable = async () => {\r\n    const gifCommentTableQuery = `CREATE TABLE IF NOT EXISTS\r\n    gif_comments(\r\n        commentId SERIAL PRIMARY KEY NOT NULL UNIQUE,\r\n        comment VARCHAR(300) NOT NULL,\r\n        createdOn VARCHAR(50) NOT NULL,\r\n        authorId INTEGER,\r\n        gifId INT,\r\n        FOREIGN KEY(gifId) REFERENCES gifs(gifId) ON UPDATE CASCADE ON DELETE CASCADE,\r\n        FOREIGN KEY(authorId) REFERENCES employee(authorId) \r\n    )`\r\n\r\n    try{\r\n        await pool.query(gifCommentTableQuery);\r\n        console.log('gif comment table created')\r\n    }\r\n    catch(e) {\r\n        console.log(e)\r\n    }\r\n};\r\n\r\n// drop table\r\n// const dropTable = async () => {\r\n//     const dropTableQuery = `DROP TABLE IF EXISTS gifs`\r\n//     try{\r\n//         await pool.query(dropTableQuery)\r\n//         console.log('table dropped')\r\n//     }\r\n//     catch(e) {\r\n//         console.log(e)\r\n//     }\r\n// }\r\n\r\n// user\r\nuserTable();\r\n// article\r\narticleTable();\r\n// gif\r\ngifTable();\r\n// article comment\r\narticleCommentTable();\r\n// gif comment\r\ngifCommentTable();\r\n// dropTable\r\n// dropTable();\r\n\r\n\r\nexport default pool;"],"file":"database.js"}