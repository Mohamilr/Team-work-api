{"version":3,"sources":["../../src/controllers/articles.js"],"names":["articleController","createArticle","req","res","body","title","article","authorId","jwt","verify","token","process","env","SECRET_KEY","err","data","status","json","error","create","values","Date","toLocaleString","pool","query","createQuery","message","articleId","rows","articleid","createdOn","createdon","e","console","log","modifyArticle","id","parseInt","params","check","checkValue","checkQuery","modify","value","modifyQuery","modifiedOn","deleteArticle","remove","removeQuery"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport pool from '../models/database';\r\n\r\n\r\nconst articleController = {\r\n     createArticle(req, res) {\r\n        const { title, article, authorId } = req.body;\r\n\r\n        try {\r\n            jwt.verify(req.token, process.env.SECRET_KEY, async (err, data) => {\r\n                if (!title || !article || !authorId) {\r\n                    return res.status(400).json({\r\n                        status: 'error',\r\n                        error: 'all fields are required'\r\n                    });\r\n                };\r\n\r\n\r\n                if (err) {\r\n                    return res.status(403).json({\r\n                        status: 'error',\r\n                        error: 'incorrect token'\r\n                    })\r\n                };\r\n\r\n\r\n\r\n                const create = `INSERT INTO articles (title, article, authorid, createdon)\r\n                                VALUES($1, $2, $3, $4) RETURNING *`;\r\n                const values = [title, article, authorId, new Date().toLocaleString()];\r\n                const createQuery = await pool.query(create, values);\r\n\r\n                res.status(201).json({\r\n                    status: 'success',\r\n                    data: {\r\n                        message: 'Article successfully posted',\r\n                        articleId: createQuery.rows[0].articleid,\r\n                        createdOn: createQuery.rows[0].createdon,\r\n                        title: createQuery.rows[0].title,\r\n                        article: createQuery.rows[0].article\r\n                    }\r\n                })\r\n            });\r\n\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n    },\r\n     modifyArticle (req, res) {\r\n        const id = parseInt(req.params.id);\r\n\r\n        try {\r\n            jwt.verify(req.token, process.env.SECRET_KEY, async (err, data) => {\r\n            \r\n                if (err) {\r\n                    return res.status(403).json({\r\n                        status: 'error',\r\n                        error: 'incorrect token'\r\n                    })\r\n                };\r\n\r\n                const check = `SELECT * FROM articles WHERE articleid=$1`;\r\n                const checkValue = [id];\r\n                const checkQuery = await pool.query(check, checkValue);\r\n\r\n          \r\n                const title = req.body.title || checkQuery.rows[0].title;\r\n                const article = req.body.article || checkQuery.rows[0].article;\r\n\r\n                const modify = `UPDATE articles SET title=$1, article=$2, createdon=$3 WHERE articleid=$4 RETURNING *`;\r\n                const value = [title, article, new Date().toLocaleString(), id];\r\n                const modifyQuery = await pool.query(modify, value)\r\n\r\n                res.status(200).json({\r\n                    status: 'success',\r\n                    data: {\r\n                        message: 'Article successfully updated',\r\n                        title: title,\r\n                        article: article,\r\n                        modifiedOn: modifyQuery.rows[0].createdon\r\n                    }\r\n                })\r\n            })\r\n            \r\n        }\r\n        catch(e) {\r\n            console.log(e)\r\n        }\r\n    },\r\n     deleteArticle (req, res) {\r\n        const id = parseInt(req.params.id)\r\n        try {\r\n            jwt.verify(req.token, process.env.SECRET_KEY, async (err, data) => {\r\n                if (err) {\r\n                    return res.status(403).json({\r\n                        status: 'error',\r\n                        error: 'incorrect token'\r\n                    })\r\n                };\r\n\r\n                const remove = `DELETE FROM articles WHERE articleid=$1`;\r\n                const value = [id];\r\n                const removeQuery = await pool.query(remove, value);\r\n\r\n                res.status(200).json({\r\n                    status: 'success',\r\n                    data: {\r\n                        message: 'Article successfully deleted'\r\n                    }\r\n                })\r\n\r\n            })\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport default articleController;"],"file":"articles.js"}