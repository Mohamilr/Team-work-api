{"version":3,"sources":["../../src/controllers/get.js"],"names":["get","getAllArticlesGif","req","res","jwt","verify","token","process","env","SECRET_KEY","err","data","status","json","error","pool","query","getQuery","rows","rowCount","e","console","log","getSingleArticle","id","parseInt","params","value","getSingleArticleQuery","comment","articleid","createdOn","createdon","title","article","getSingleGif","getSingleGifQuery","comments","gifid","gifcreatedon","giftitle","url","image"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport pool from '../models/database';\r\n\r\nconst get = {\r\n    getAllArticlesGif(req, res) {\r\n        try {\r\n            jwt.verify(req.token, process.env.SECRET_KEY, async (err, data) => {\r\n                if (err) {\r\n                    return res.status(403).json({\r\n                        status: 'error',\r\n                        error: 'incorrect token'\r\n                    })\r\n                }\r\n\r\n                const get = `SELECT * FROM articles, gifs `;\r\n                const getQuery = await pool.query(get);\r\n\r\n                if (!getQuery.rows[0]) {\r\n                    return res.status(400).json({\r\n                        status: 'error',\r\n                        error: 'sorry, there are no articles or gifs available in the database'\r\n                    })\r\n                }\r\n\r\n                res.status(200).json({\r\n                    status: 'success',\r\n                    data: [\r\n                        getQuery.rowCount,\r\n                        getQuery.rows\r\n                    ]\r\n                })\r\n            })\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n    },\r\n    getSingleArticle(req, res) {\r\n        const id = parseInt(req.params.id);\r\n        try {\r\n            jwt.verify(req.token, process.env.SECRET_KEY, async (err, data) => {\r\n                if (err) {\r\n                    return res.status(403).json({\r\n                        status: 'error',\r\n                        error: 'incorrect token'\r\n                    })\r\n                }\r\n                // const getSingleArticle = `SELECT a.articleId, a.title, c.comment, c.commentId, c.authorId FROM articles a JOIN article_comments c ON a.articleId=$1`\r\n\r\n                const getSingleArticle = `SELECT * FROM articles WHERE articleId=$1`\r\n                const value = [id]\r\n                const getSingleArticleQuery = await pool.query(getSingleArticle, value);\r\n\r\n                // \r\n                const comment = await pool.query(`SELECT commentid, comment, authorid FROM article_comments WHERE articleId=${id}`)\r\n                res.status(200).json({\r\n                    status: 'success',\r\n                    data: {\r\n                        id: getSingleArticleQuery.rows[0].articleid,\r\n                        createdOn: getSingleArticleQuery.rows[0].createdon,\r\n                        title: getSingleArticleQuery.rows[0].title,\r\n                        article: getSingleArticleQuery.rows[0].article,\r\n                        comment: comment.rows\r\n                    }\r\n                })\r\n            })\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n    },\r\n    getSingleGif(req, res) {\r\n        const id = parseInt(req.params.id);\r\n        try {\r\n            jwt.verify(req.token, process.env.SECRET_KEY, async (err, data) => {\r\n                if (err) {\r\n                    return res.status(403).json({\r\n                        status: 'error',\r\n                        error: 'incorrect token'\r\n                    })\r\n                }\r\n\r\n                const getSingleGif = `SELECT * FROM gifs WHERE gifId=$1`\r\n                const value = [id]\r\n                const getSingleGifQuery = await pool.query(getSingleGif, value);\r\n\r\n                // \r\n                const comments = await pool.query(`SELECT commentid, comment, authorid FROM gif_comments WHERE gifId=${id}`)\r\n\r\n                res.status(200).json({\r\n                    status: 'success',\r\n                    data: {\r\n                        id: getSingleGifQuery.rows[0].gifid,\r\n                        createdOn: getSingleGifQuery.rows[0].gifcreatedon,\r\n                        title: getSingleGifQuery.rows[0].giftitle,\r\n                        url: getSingleGifQuery.rows[0].image,\r\n                        comments: comments.rows\r\n                    }\r\n\r\n                })\r\n            })\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default get;"],"file":"get.js"}