{"version":3,"sources":["../../src/controllers/gifs.js"],"names":["gifController","postGif","req","res","image","files","gif","body","gifTitle","gifAuthorId","jwt","verify","token","process","env","SECRET_KEY","err","data","status","json","error","cloudinary","v2","uploader","upload","tempFilePath","resourse_type","then","result","values","url","Date","toLocaleString","pool","query","gifQuery","gifId","rows","gifid","message","createdOn","createdon","title","imageUrl","e","console","log","deleteGif","id","parseInt","params","value","deleteGifQuery"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport cloudinary from 'cloudinary';\r\nimport pool from '../models/database';\r\n\r\n// configure cloudinary\r\nimport cloudinaryConfig from '../config/cloudinary.config';\r\n\r\n\r\n\r\nconst gifController = {\r\n     postGif (req, res) {\r\n        let image = req.files.gif;\r\n        const { gifTitle, gifAuthorId } = req.body;\r\n        try {\r\n            jwt.verify(req.token, process.env.SECRET_KEY, async (err, data) => {\r\n                if (!image || !gifTitle || !gifAuthorId) {\r\n                    return res.status(400).json({\r\n                        status: 'error',\r\n                        error: 'all fields are required'\r\n                    });\r\n                };\r\n\r\n                if(err) {\r\n                    return res.status(403).json({\r\n                        status: 'error',\r\n                        error: 'incorrect token'\r\n                    })\r\n                }\r\n\r\n\r\n                cloudinary.v2.uploader.upload(image.tempFilePath, {resourse_type : 'gif'})\r\n                .then(async (result) =>  {\r\n                const gif = `INSERT INTO gifs (image, gifTitle, gifAuthorId , gifCreatedOn)\r\n            VALUES($1, $2, $3, $4) RETURNING *`;\r\n            const values = [result.url, gifTitle, gifAuthorId, new Date().toLocaleString()];\r\n            const gifQuery = await pool.query(gif, values)\r\n\r\n                res.status(201).json({\r\n                    status: 'success',\r\n                    data:  {\r\n                        gifId: gifQuery.rows[0].gifid,\r\n                        message: 'gif image successfully posted',\r\n                        createdOn: gifQuery.rows[0].createdon,\r\n                        title: gifQuery.rows[0].title,\r\n                        imageUrl: gifQuery.rows[0].image\r\n                    }\r\n                })\r\n                }).catch((e) =>\r\n                    console.log(e) \r\n                )\r\n            })\r\n   \r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }    \r\n    },\r\n    deleteGif (req, res) {\r\n        const id = parseInt(req.params.id);\r\n        try {\r\n            jwt.verify(req.token, process.env.SECRET_KEY, async (err, data) => {\r\n                if(err) {\r\n                    return res.status(403).json({\r\n                        status: 'error',\r\n                        error: 'incorrect token'\r\n                    })\r\n                }\r\n\r\n                const deleteGif = `DELETE FROM gifs WHERE gifId=$1`\r\n                const value = [id];\r\n                const deleteGifQuery = await pool.query(deleteGif, value);\r\n\r\n                res.status(200).json({\r\n                    status: 'success',\r\n                    data : {\r\n                        message: 'gif post successfully deleted'\r\n                    }\r\n                })\r\n\r\n            })\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        } \r\n    }\r\n\r\n}\r\n\r\nexport default gifController;"],"file":"gifs.js"}