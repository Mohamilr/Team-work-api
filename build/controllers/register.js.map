{"version":3,"sources":["../../src/controllers/register.js"],"names":["register","signUP","req","res","body","firstName","lastName","email","password","gender","jobRole","department","address","status","json","error","checkQuery","value","pool","query","check","rows","bcrypt","genSalt","salt","hash","hashedPassword","signUpQuery","userValue","signUpQuerys","jwt","sign","process","env","SECRET_KEY","expiresIn","err","token","data","message","authorId","authorid","console","log","logIn","logInQuery","compare","result","verifyToken","next","headers","beareHeader","split"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport pool from '../models/database';\r\n\r\n\r\nconst register = {\r\n    async signUP (req, res) {\r\n        const { firstName, lastName, email, password, gender, jobRole, department, address} = req.body;\r\n\r\n        try{\r\n\r\n            if(!firstName || !lastName || !email || !password || !gender || !jobRole || !department || !address) {\r\n                return res.status(400).json({\r\n                    status: 'error',\r\n                    error: 'all fields are required'\r\n                })\r\n            };\r\n\r\n            const checkQuery = `SELECT * FROM employee WHERE email=$1`;\r\n            const value = [email];\r\n            const check = await pool.query(checkQuery, value);\r\n\r\n            if(check.rows[0]) {\r\n                return res.status(400).json({\r\n                    status: 'error',\r\n                    error: 'user already exist'\r\n                })\r\n            }\r\n    \r\n            const salt = await bcrypt.genSalt(10);\r\n            const hashedPassword = await bcrypt.hash(password, salt);\r\n\r\n            const signUpQuery = `INSERT INTO employee (firstName, lastName, email, password, gender, jobRole, department, address)\r\n            VALUES($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *`\r\n            const userValue = [firstName, lastName, email, hashedPassword, gender, jobRole, department, address];\r\n            const signUpQuerys = await pool.query(signUpQuery, userValue);\r\n\r\n            jwt.sign({ email, password }, process.env.SECRET_KEY, {expiresIn : '24h'} ,(err, token) => {\r\n                res.status(201).json({\r\n                    status: 'success',\r\n                    data : {\r\n                        message: 'user account successfully created',\r\n                        token,\r\n                        authorId: signUpQuerys.rows[0].authorid\r\n                    }\r\n                })\r\n            })\r\n        }\r\n        catch(e) {\r\n            console.log(e);\r\n        }\r\n    },\r\n    async logIn (req, res) {\r\n        const { email, password } = req.body;\r\n  \r\n        try {\r\n            if(!email || !password) {\r\n                return res.status(400).json({\r\n                     status: 'error',\r\n                     error: 'all fields are required'\r\n                 })\r\n             }\r\n\r\n            const logIn = `SELECT * FROM employee WHERE email=$1`;\r\n            const value = [email];\r\n            const logInQuery = await pool.query(logIn, value);\r\n\r\n            if(!logInQuery.rows[0]) {\r\n                return res.status(400).json({\r\n                    status: 'error',\r\n                    error: 'email does not exist, please sign up'\r\n                })\r\n            }\r\n\r\n              bcrypt.compare(password, logInQuery.rows[0].password, (err, result) => {\r\n                if(email === logInQuery.rows[0].email && result === true) {\r\n                    jwt.sign({ email, password}, process.env.SECRET_KEY, {expiresIn : '24h'}, (err, token) => {\r\n                     res.status(201).json({\r\n                         status: 'success',\r\n                         message: 'user successfully loged in',\r\n                         data : {\r\n                             token,\r\n                             authorId: logInQuery.rows[0].authorid\r\n                         }\r\n                     })\r\n                    })\r\n                }\r\n                else {\r\n                    res.status(403).json({\r\n                        status: 'error',\r\n                        error: 'token not generated, incorrect email or password'\r\n                    })\r\n                }\r\n             })\r\n        }\r\n        catch(e) {\r\n            console.log(e)\r\n        }  \r\n    },\r\n    verifyToken (req, res, next) {\r\n        const headers = req.headers['authorization'];\r\n        \r\n        if(typeof headers !== 'undefined'){\r\n            const beareHeader = headers.split(' ');\r\n            const token = beareHeader[1];\r\n    \r\n            req.token = token\r\n            next();\r\n        }\r\n        else {\r\n            res.status(403).json({\r\n                status: 'error',\r\n                error: 'forbidden'\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default register;"],"file":"register.js"}