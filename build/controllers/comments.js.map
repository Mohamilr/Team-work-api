{"version":3,"sources":["../../src/controllers/comments.js"],"names":["comments","articleComment","req","res","id","parseInt","params","body","comment","authorId","jwt","verify","token","process","env","SECRET_KEY","err","data","status","json","error","check","checkValue","pool","query","checkQuery","values","Date","toLocaleString","commentQuery","message","createdOn","rows","createdon","articleTitle","title","article","e","console","log","gifComment","gifTitle"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport pool from '../models/database';\r\n\r\nconst comments = {\r\n    articleComment (req, res) {\r\n        const id = parseInt(req.params.id)\r\n        const { comment, authorId } = req.body;\r\n        try {\r\n            jwt.verify(req.token, process.env.SECRET_KEY, async (err, data) => {\r\n                if(err) {\r\n                    return res.status(403).json({\r\n                        status: 'error',\r\n                        error: 'incorrect token'\r\n                    })\r\n                }\r\n\r\n                if (!comment || !authorId) {\r\n                    return res.status(400).json({\r\n                        status: 'error',\r\n                        error: 'all fields are required'\r\n                    });\r\n                }\r\n\r\n                const check = `SELECT * FROM articles WHERE articleid=$1`;\r\n                const checkValue = [id];\r\n                const checkQuery = await pool.query(check, checkValue);\r\n\r\n\r\n                const comments = `INSERT INTO article_comments (comment, createdon, authorid, articleid)\r\n                                VALUES($1, $2, $3, $4) RETURNING *`;\r\n                const values = [comment, new Date().toLocaleString(), authorId, id];\r\n                const commentQuery = await pool.query(comments, values);\r\n                \r\n\r\n                res.status(201).json({\r\n                    status: 'success',\r\n                    data: {\r\n                        message: 'Comment successfully created',\r\n                        createdOn: commentQuery.rows[0].createdon,\r\n                        articleTitle: checkQuery.rows[0].title,\r\n                        article: checkQuery.rows[0].article,\r\n                        comment: commentQuery.rows[0].comment\r\n                    }\r\n                })\r\n            })\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n    },\r\n    gifComment (req, res) {\r\n        const id = parseInt(req.params.id)\r\n        const { comment, authorId } = req.body;\r\n        try {\r\n            jwt.verify(req.token, process.env.SECRET_KEY, async (err, data) => {\r\n                if (!comment || !authorId) {\r\n                    return res.status(400).json({\r\n                        status: 'error',\r\n                        error: 'all fields are required'\r\n                    });\r\n                };\r\n\r\n\r\n                if(err) {\r\n                    return res.status(403).json({\r\n                        status: 'error',\r\n                        error: 'incorrect token'\r\n                    })\r\n                } \r\n\r\n\r\n                const check = `SELECT * FROM gifs WHERE gifId=$1`;\r\n                const checkValue = [id];\r\n                const checkQuery = await pool.query(check, checkValue);\r\n\r\n\r\n                const comments = `INSERT INTO gif_comments (comment, createdon, authorid, gifid)\r\n                                VALUES($1, $2, $3, $4) RETURNING *`;\r\n                const values = [comment, new Date().toLocaleString(), authorId, id];\r\n                const commentQuery = await pool.query(comments, values);\r\n                \r\n\r\n                res.status(201).json({\r\n                    status: 'success',\r\n                    data: {\r\n                        message: 'Comment successfully created',\r\n                        createdOn: commentQuery.rows[0].createdon,\r\n                        gifTitle: checkQuery.rows[0].title,\r\n                        comment: commentQuery.rows[0].comment\r\n                    }\r\n                })\r\n            })\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default comments;"],"file":"comments.js"}